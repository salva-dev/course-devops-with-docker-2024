version: '3.8'


# There are no changes in the original Dockerfile, although I have included them in the folder by following the instructions.
# The only thing that changes is in the docker-compose, for the ‘frontend:’ entry, I had to pass a new parameter to the ‘build’ of the Dockerfile so that the url to call the api is /api/ . 
# I have achieved this by extending the ‘build’ tag:
# build: 
#       context: ./1.12-hello-frontend
#       args:
#         - REACT_APP_BACKEND_URL=http://localhost/api
#
# In the frontend dockerfile was ARG REACT_APP_BACKEND_URL with the default option, but when I pass this argument and build again this variable is overwritten.
#
# Finally I ran docker compose up --build to force the build.

## run this docker compose with
# $ docker compose up --build
## Open browser in localhost
## Finish with 
# docker compose down
services:
  db:
    image: postgres:16.3-alpine3.20
    restart: unless-stopped
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=my.pwd
    volumes:
      - ./database:/var/lib/postgresql/data

  redis:
    image: redis:7.2.5-alpine3.20
    restart: unless-stopped

  backend:
    build: ./1.13-example-backend
    environment:
      - REQUEST_ORIGIN=http://localhost
      - REDIS_HOST=redis
      - POSTGRES_HOST=db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=my.pwd
      - POSTGRES_DATABASE=postgres
    depends_on:
      - db

  frontend:
    build: 
      context: ./1.12-hello-frontend
      args:
        - REACT_APP_BACKEND_URL=http://localhost/api
    depends_on:
      - db
      - backend
      - redis

  nginx:
    image: nginx:1.26-alpine3.19
    ports:
      - 80:80
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
